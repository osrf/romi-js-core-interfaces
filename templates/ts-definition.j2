{% set base_type = msgspec.base_type %}
/* This is a generated file, do not edit */

{% for type in msgspec.dependent_types() %}
import { {{ type.type }} } from '../../{{ type.pkg_name }}/msg/{{ type.type }}';
{% endfor %}

export class {{ base_type.type }} {
  static readonly typeName = '{{ base_type.pkg_name }}/{{ msgspec.reldir }}/{{ base_type.type }}';

  /* eslint-disable @typescript-eslint/no-explicit-any */
  static fromObject(obj: any): {{ base_type.type }} {
{% for field in msgspec.fields %}
    if (obj['{{ field.name }}'] === undefined) {
      throw new TypeError('missing key "{{ field.name }}"');
    }
{% if field.js_type.is_array %}
    if (!Array.isArray(obj['{{ field.name }}'])) {
      throw new TypeError('expected "{{ field.name }}" to be of type "{{ field.js_type.type }}"');
    }
{% if field.js_type.element_type.is_primitive %}
    const {{ field.name }} = obj['{{ field.name }}'];
    if ({{ field.name }}.length > 0 && typeof {{ field.name }}[0] !== '{{ field.js_type.element_type.type }}') {
      throw new TypeError('expected "{{ field.name }}" to be of type "{{ field.js_type.type }}"');
    }
{% else %}
    const {{ field.name }} = obj['{{ field.name }}'].map(x => {
      return {{ field.js_type.element_type.type }}.fromObject(x);
    });
{% endif %}
{% elif field.js_type.is_primitive %}
    if (typeof obj['{{ field.name }}'] !== '{{ field.js_type.type }}') {
      throw new TypeError('expected "{{ field.name }}" to be "{{ field.js_type.type }}"');
    }
    const {{ field.name }} = obj['{{ field.name }}'];
{% elif field.js_type.is_typed_array %}
    let {{ field.name }};
    if (!(obj['{{ field.name }}'] instanceof {{ field.js_type.type }})) {
      if (!Array.isArray(obj['{{ field.name }}']) || (obj['{{ field.name }}'].length > 0 && typeof obj['{{ field.name }}'][0] !== 'number')) {
        throw new TypeError('expected "{{ field.name }}" to be "{{ field.js_type.type }}" or an array');
      } else {
        {{ field.name }} = new {{ field.js_type.type }}([...obj['{{ field.name }}']]);
      }
    } else {
      {{ field.name }} = obj['{{ field.name }}'];
    }
{% else %}
    const {{ field.name }} = {{ field.js_type.type }}.fromObject(obj['{{ field.name }}']);
{% endif %}
{% endfor %}

    return new {{ base_type.type }}(
{% for field in msgspec.fields %}
      {{ field.name }},
{% endfor %}
    );
  }
  /* eslint-enable @typescript-eslint/no-explicit-any */

{% for const in msgspec.constants %}
  static readonly {{ const.name }} = {{ const.value }};
{% endfor %}
{% if msgspec.constants %}

{% endif %}
  constructor(
{% for field in msgspec.fields %}
    public {{ field.name }}: {{ field.js_type.type }},
{% endfor %}
  ) { }
}
